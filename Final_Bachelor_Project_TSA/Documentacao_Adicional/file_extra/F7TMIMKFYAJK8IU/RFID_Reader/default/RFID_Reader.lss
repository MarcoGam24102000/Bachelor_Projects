
RFID_Reader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000003d2  00000466  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800134  00800134  0000049a  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b6  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063c  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000395  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000461  00000000  00000000  00000f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001da  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000227  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ca 00 	call	0x194	; 0x194 <main>
  9e:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_5>:
	BSET(SREG,7);		// Set SREG I-bit
}

// this is the interrupt handler
ISR(PCINT2_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	if (BCHK(PIND,RFID_IN))	// Start bit goes low
  c6:	4a 99       	sbic	0x09, 2	; 9
  c8:	4a c0       	rjmp	.+148    	; 0x15e <__vector_5+0xb8>
void
TunedDelay(uint16_t delay)
{
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
  ca:	87 ed       	ldi	r24, 0xD7	; 215
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	8f 3f       	cpi	r24, 0xFF	; 255
  d6:	92 07       	cpc	r25, r18
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__vector_5+0x2a>
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
	{
		TunedDelay(INTRABIT_DELAY);	// skip a bit, brother...
		if (BCHK(PIND,RFID_IN))
			BSET(bit,x);
		else
			BCLR(bit,x);	
  e0:	e6 eb       	ldi	r30, 0xB6	; 182
  e2:	f3 e0       	ldi	r31, 0x03	; 3
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	70 e0       	ldi	r23, 0x00	; 0
void
TunedDelay(uint16_t delay)
{
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
  ea:	cf 01       	movw	r24, r30
  ec:	4a 2f       	mov	r20, r26
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	4f ef       	ldi	r20, 0xFF	; 255
  f2:	8f 3f       	cpi	r24, 0xFF	; 255
  f4:	94 07       	cpc	r25, r20
  f6:	d9 f7       	brne	.-10     	; 0xee <__vector_5+0x48>
	uint8_t	bit = 0;
	TunedDelay(CENTER_DELAY);		// Center on start bit
	for (uint8_t x = 0; x < 8; x++)
	{
		TunedDelay(INTRABIT_DELAY);	// skip a bit, brother...
		if (BCHK(PIND,RFID_IN))
  f8:	4a 9b       	sbis	0x09, 2	; 9
  fa:	09 c0       	rjmp	.+18     	; 0x10e <__vector_5+0x68>
			BSET(bit,x);
  fc:	cb 01       	movw	r24, r22
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <__vector_5+0x60>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <__vector_5+0x5c>
 10a:	58 2b       	or	r21, r24
 10c:	09 c0       	rjmp	.+18     	; 0x120 <__vector_5+0x7a>
		else
			BCLR(bit,x);	
 10e:	cb 01       	movw	r24, r22
 110:	02 2e       	mov	r0, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <__vector_5+0x72>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <__vector_5+0x6e>
 11c:	80 95       	com	r24
 11e:	58 23       	and	r21, r24
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
{
	if (BCHK(PIND,RFID_IN))	// Start bit goes low
		return;
	uint8_t	bit = 0;
	TunedDelay(CENTER_DELAY);		// Center on start bit
	for (uint8_t x = 0; x < 8; x++)
 124:	28 30       	cpi	r18, 0x08	; 8
 126:	31 05       	cpc	r19, r1
 128:	01 f7       	brne	.-64     	; 0xea <__vector_5+0x44>
void
TunedDelay(uint16_t delay)
{
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
 12a:	86 eb       	ldi	r24, 0xB6	; 182
 12c:	93 e0       	ldi	r25, 0x03	; 3
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	8f 3f       	cpi	r24, 0xFF	; 255
 136:	92 07       	cpc	r25, r18
 138:	d9 f7       	brne	.-10     	; 0x130 <__vector_5+0x8a>
			BSET(bit,x);
		else
			BCLR(bit,x);	
	}
	TunedDelay(INTRABIT_DELAY);		// skip stop bit
	RFID_tag[rxIdx] = bit;
 13a:	e0 91 42 01 	lds	r30, 0x0142
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	eb 5c       	subi	r30, 0xCB	; 203
 142:	fe 4f       	sbci	r31, 0xFE	; 254
 144:	50 83       	st	Z, r21
	++rxIdx;
 146:	80 91 42 01 	lds	r24, 0x0142
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	80 93 42 01 	sts	0x0142, r24
	if (rxIdx == 12)
 150:	80 91 42 01 	lds	r24, 0x0142
 154:	8c 30       	cpi	r24, 0x0C	; 12
 156:	19 f4       	brne	.+6      	; 0x15e <__vector_5+0xb8>
		bDataReady = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 41 01 	sts	0x0141, r24
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <CriticalSegment>:

void
CriticalSegment(uint8_t ena)
{
	static uint8_t sreg;
	if (ena)
 17e:	88 23       	and	r24, r24
 180:	29 f0       	breq	.+10     	; 0x18c <CriticalSegment+0xe>
	{
		sreg = SREG;	// save off our global status register
 182:	8f b7       	in	r24, 0x3f	; 63
 184:	80 93 34 01 	sts	0x0134, r24
		cli();			// stop global interrupts
 188:	f8 94       	cli
 18a:	08 95       	ret
	} else
	{
		SREG = sreg;	// restore global interrupt flag (and any other prev settings)
 18c:	80 91 34 01 	lds	r24, 0x0134
 190:	8f bf       	out	0x3f, r24	; 63
 192:	08 95       	ret

00000194 <main>:
static volatile uint8_t bDataReady;
static volatile uint8_t rxIdx;

int
main()
{
 194:	cf 92       	push	r12
 196:	df 92       	push	r13
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	df 93       	push	r29
 1a0:	cf 93       	push	r28
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <main+0x10>
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
	USART_init(BAUD_9600);	
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 5d 01 	call	0x2ba	; 0x2ba <USART_init>
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b2:	20 e9       	ldi	r18, 0x90	; 144
 1b4:	31 e0       	ldi	r19, 0x01	; 1
 1b6:	f9 01       	movw	r30, r18
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <main+0x22>
	_delay_ms(2000);	// Long enough for me to connect my terminal program
	
	USART_tx_S("USART Initialized!\n");
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 81 01 	call	0x302	; 0x302 <USART_tx_S>


void
RFID_init()
{
	bDataReady = 0;
 1c8:	10 92 41 01 	sts	0x0141, r1
	rxIdx = 0;
 1cc:	10 92 42 01 	sts	0x0142, r1
	// RFID_IN input from RFID Reader SOUT, RFID_ENA output to RFID Reader /ENA
	BSET(DDRD, RFID_ENA);
 1d0:	53 9a       	sbi	0x0a, 3	; 10
	BSET(PORTD,RFID_IN);	// pullup
 1d2:	5a 9a       	sbi	0x0b, 2	; 11

	BSET(PCICR,PCIE2);	// pin change interrupt control register pcie2
 1d4:	80 91 68 00 	lds	r24, 0x0068
 1d8:	84 60       	ori	r24, 0x04	; 4
 1da:	80 93 68 00 	sts	0x0068, r24
	BSET(PCMSK2,PCINT18); // enable pin change interrupt for PCINT18 (PD2)
 1de:	80 91 6d 00 	lds	r24, 0x006D
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	80 93 6d 00 	sts	0x006D, r24
	BSET(SREG,7);		// Set SREG I-bit
 1e8:	8f b7       	in	r24, 0x3f	; 63
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	8f bf       	out	0x3f, r24	; 63

void
RFID_ena(uint8_t ena)
{
	if (ena)
		BCLR(PORTD,RFID_ENA);
 1ee:	5b 98       	cbi	0x0b, 3	; 11
void
TunedDelay(uint16_t delay)
{
  uint8_t tmp=0;

  asm volatile("sbiw    %0, 0x01 \n\t"
 1f0:	83 eb       	ldi	r24, 0xB3	; 179
 1f2:	93 e0       	ldi	r25, 0x03	; 3
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	8f 3f       	cpi	r24, 0xFF	; 255
 1fc:	92 07       	cpc	r25, r18
 1fe:	d9 f7       	brne	.-10     	; 0x1f6 <main+0x62>
			if ( ValidTag() )
			{
				USART_tx_S("\nRFID Tag: ");
				for(uint8_t x = 1; x < 11; x++)
				{
					USART_tx_S(itoa(RFID_tag[x],ibuff,16));
 200:	6e 01       	movw	r12, r28
 202:	08 94       	sec
 204:	c1 1c       	adc	r12, r1
 206:	d1 1c       	adc	r13, r1
	TunedDelay(947);	// center on serial pulse

	char ibuff[2];
	for (;;)
	{
		if (bDataReady)
 208:	80 91 41 01 	lds	r24, 0x0141
 20c:	88 23       	and	r24, r24
 20e:	e1 f3       	breq	.-8      	; 0x208 <main+0x74>
{
	// Format: [Start Byte|RFID|Stop Byte]
	// Format: 0x0A[10 hex values]0x0D
	// All we're doing here is checking to see if this is a valid RFID
	// tag or if we got random noise.
	if (RFID_tag[0] == 0x0A)
 210:	80 91 35 01 	lds	r24, 0x0135
 214:	8a 30       	cpi	r24, 0x0A	; 10
 216:	11 f5       	brne	.+68     	; 0x25c <main+0xc8>
			USART_tx_S("\nStop  byte: ");
			USART_tx_S(itoa(RFID_tag[11],&ibuff[0],16));
#endif
			if ( ValidTag() )
			{
				USART_tx_S("\nRFID Tag: ");
 218:	84 e1       	ldi	r24, 0x14	; 20
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 81 01 	call	0x302	; 0x302 <USART_tx_S>
 220:	06 e3       	ldi	r16, 0x36	; 54
 222:	11 e0       	ldi	r17, 0x01	; 1
 224:	ff 24       	eor	r15, r15
 226:	f3 94       	inc	r15
				for(uint8_t x = 1; x < 11; x++)
				{
					USART_tx_S(itoa(RFID_tag[x],ibuff,16));
 228:	f8 01       	movw	r30, r16
 22a:	80 81       	ld	r24, Z
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	b6 01       	movw	r22, r12
 230:	40 e1       	ldi	r20, 0x10	; 16
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	0e 94 a2 01 	call	0x344	; 0x344 <itoa>
 238:	0e 94 81 01 	call	0x302	; 0x302 <USART_tx_S>
					if (x != 10)
 23c:	fa e0       	ldi	r31, 0x0A	; 10
 23e:	ff 16       	cp	r15, r31
 240:	19 f0       	breq	.+6      	; 0x248 <main+0xb4>
						USART_tx(':');
 242:	8a e3       	ldi	r24, 0x3A	; 58
 244:	0e 94 79 01 	call	0x2f2	; 0x2f2 <USART_tx>
			USART_tx_S(itoa(RFID_tag[11],&ibuff[0],16));
#endif
			if ( ValidTag() )
			{
				USART_tx_S("\nRFID Tag: ");
				for(uint8_t x = 1; x < 11; x++)
 248:	f3 94       	inc	r15
 24a:	0f 5f       	subi	r16, 0xFF	; 255
 24c:	1f 4f       	sbci	r17, 0xFF	; 255
 24e:	8b e0       	ldi	r24, 0x0B	; 11
 250:	f8 16       	cp	r15, r24
 252:	51 f7       	brne	.-44     	; 0x228 <main+0x94>
				{
					USART_tx_S(itoa(RFID_tag[x],ibuff,16));
					if (x != 10)
						USART_tx(':');
				}
				USART_tx_S("\n");
 254:	80 e2       	ldi	r24, 0x20	; 32
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 81 01 	call	0x302	; 0x302 <USART_tx_S>
			}
			rxIdx = 0;
 25c:	10 92 42 01 	sts	0x0142, r1
			bDataReady = 0;
 260:	10 92 41 01 	sts	0x0141, r1
 264:	d1 cf       	rjmp	.-94     	; 0x208 <main+0x74>

00000266 <baseconv>:
#include <stdio.h>
#include <limits.h>

char *
baseconv(unsigned int num, int base)
{
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	9c 01       	movw	r18, r24
	static char retbuf[sizeof(int)*CHAR_BIT+1];
	char * p;

	if (base < 2 || base > 16) return NULL;
 270:	eb 01       	movw	r28, r22
 272:	cb 01       	movw	r24, r22
 274:	02 97       	sbiw	r24, 0x02	; 2
 276:	0f 97       	sbiw	r24, 0x0f	; 15
 278:	18 f0       	brcs	.+6      	; 0x280 <baseconv+0x1a>
 27a:	00 e0       	ldi	r16, 0x00	; 0
 27c:	10 e0       	ldi	r17, 0x00	; 0
 27e:	17 c0       	rjmp	.+46     	; 0x2ae <baseconv+0x48>
	p = &retbuf[sizeof(retbuf)-1];
	*p = '\0';
 280:	10 92 53 01 	sts	0x0153, r1
 284:	03 e5       	ldi	r16, 0x53	; 83
 286:	11 e0       	ldi	r17, 0x01	; 1

	do {
		*--p = "01234567890abcdef"[num % base];
 288:	c9 01       	movw	r24, r18
 28a:	be 01       	movw	r22, r28
 28c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__udivmodhi4>
 290:	fc 01       	movw	r30, r24
 292:	ee 5d       	subi	r30, 0xDE	; 222
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	80 81       	ld	r24, Z
 298:	f8 01       	movw	r30, r16
 29a:	82 93       	st	-Z, r24
 29c:	8f 01       	movw	r16, r30
		num /= base;
 29e:	c9 01       	movw	r24, r18
 2a0:	be 01       	movw	r22, r28
 2a2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__udivmodhi4>
 2a6:	9b 01       	movw	r18, r22
	} while(num != 0);
 2a8:	61 15       	cp	r22, r1
 2aa:	71 05       	cpc	r23, r1
 2ac:	69 f7       	brne	.-38     	; 0x288 <baseconv+0x22>

	return p;
}
 2ae:	c8 01       	movw	r24, r16
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	08 95       	ret

000002ba <USART_init>:
// Initialize the UART to b Bd, tx/rx, 8N1, asynchronous mode.
// TODO: Add support for bit size, parity, stop bits, etc
void
USART_init(uint8_t b)
{
	switch(b)
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <USART_init+0xa>
 2be:	83 30       	cpi	r24, 0x03	; 3
 2c0:	51 f4       	brne	.+20     	; 0x2d6 <USART_init+0x1c>
 2c2:	05 c0       	rjmp	.+10     	; 0x2ce <USART_init+0x14>
static void
uart_2400(void)
{
	#define BAUD 2400
	#include <util/setbaud.h>
	UBRR0H = UBRRH_VALUE;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = UBRRL_VALUE;
 2ca:	80 ea       	ldi	r24, 0xA0	; 160
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <USART_init+0x22>
uart_38400(void)
{
	#undef BAUD // avoid compiler warning
	#define BAUD 38400
	#include <util/setbaud.h>
	UBRR0H = UBRRH_VALUE;
 2ce:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
 2d2:	89 e1       	ldi	r24, 0x19	; 25
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <USART_init+0x22>
uart_9600(void)
{
	#undef BAUD
	#define BAUD 9600
	#include <util/setbaud.h>
	UBRR0H = UBRRH_VALUE;
 2d6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
 2da:	87 e6       	ldi	r24, 0x67	; 103
 2dc:	80 93 c4 00 	sts	0x00C4, r24
	#if USE_2X
	UCSR0A |= (1 << U2X0);
	#else
	UCSR0A &= ~(1 << U2X0);
 2e0:	80 91 c0 00 	lds	r24, 0x00C0
 2e4:	8d 7f       	andi	r24, 0xFD	; 253
 2e6:	80 93 c0 00 	sts	0x00C0, r24
	default:
		uart_9600(); break;
	}

	// Enable Rx/Tx in register UCSR0B
	UCSR0B 	= (1<<RXEN0)|(1<<TXEN0);
 2ea:	88 e1       	ldi	r24, 0x18	; 24
 2ec:	80 93 c1 00 	sts	0x00C1, r24
}
 2f0:	08 95       	ret

000002f2 <USART_tx>:

// USART_transmit
// Send data to USART buffer for transmission
void
USART_tx(unsigned char data)
{
 2f2:	98 2f       	mov	r25, r24
	// Check UDRE0 in UCSR0A.  If 1, then buffer empty.
	loop_until_bit_is_set(UCSR0A,UDRE0);
 2f4:	80 91 c0 00 	lds	r24, 0x00C0
 2f8:	85 ff       	sbrs	r24, 5
 2fa:	fc cf       	rjmp	.-8      	; 0x2f4 <USART_tx+0x2>
	UDR0 = data;
 2fc:	90 93 c6 00 	sts	0x00C6, r25
}
 300:	08 95       	ret

00000302 <USART_tx_S>:
void
USART_tx_S(const char * data)
{
 302:	fc 01       	movw	r30, r24
 304:	07 c0       	rjmp	.+14     	; 0x314 <USART_tx_S+0x12>
// Send data to USART buffer for transmission
void
USART_tx(unsigned char data)
{
	// Check UDRE0 in UCSR0A.  If 1, then buffer empty.
	loop_until_bit_is_set(UCSR0A,UDRE0);
 306:	80 91 c0 00 	lds	r24, 0x00C0
 30a:	85 ff       	sbrs	r24, 5
 30c:	fc cf       	rjmp	.-8      	; 0x306 <USART_tx_S+0x4>
}
void
USART_tx_S(const char * data)
{
	while(*data != 0x00)
		USART_tx(*(data++));
 30e:	31 96       	adiw	r30, 0x01	; 1
void
USART_tx(unsigned char data)
{
	// Check UDRE0 in UCSR0A.  If 1, then buffer empty.
	loop_until_bit_is_set(UCSR0A,UDRE0);
	UDR0 = data;
 310:	90 93 c6 00 	sts	0x00C6, r25
}
void
USART_tx_S(const char * data)
{
	while(*data != 0x00)
 314:	90 81       	ld	r25, Z
 316:	99 23       	and	r25, r25
 318:	b1 f7       	brne	.-20     	; 0x306 <USART_tx_S+0x4>
		USART_tx(*(data++));
}
 31a:	08 95       	ret

0000031c <USART_tx_P>:
void 	USART_tx_P(const char * data) 
{
 31c:	fc 01       	movw	r30, r24
 31e:	07 c0       	rjmp	.+14     	; 0x32e <USART_tx_P+0x12>
// Send data to USART buffer for transmission
void
USART_tx(unsigned char data)
{
	// Check UDRE0 in UCSR0A.  If 1, then buffer empty.
	loop_until_bit_is_set(UCSR0A,UDRE0);
 320:	80 91 c0 00 	lds	r24, 0x00C0
 324:	85 ff       	sbrs	r24, 5
 326:	fc cf       	rjmp	.-8      	; 0x320 <USART_tx_P+0x4>
		USART_tx(*(data++));
}
void 	USART_tx_P(const char * data) 
{
	while(pgm_read_byte(data) != 0x00)
		USART_tx(pgm_read_byte(data++));
 328:	31 96       	adiw	r30, 0x01	; 1
void
USART_tx(unsigned char data)
{
	// Check UDRE0 in UCSR0A.  If 1, then buffer empty.
	loop_until_bit_is_set(UCSR0A,UDRE0);
	UDR0 = data;
 32a:	90 93 c6 00 	sts	0x00C6, r25
	while(*data != 0x00)
		USART_tx(*(data++));
}
void 	USART_tx_P(const char * data) 
{
	while(pgm_read_byte(data) != 0x00)
 32e:	94 91       	lpm	r25, Z+
 330:	99 23       	and	r25, r25
 332:	b1 f7       	brne	.-20     	; 0x320 <USART_tx_P+0x4>
		USART_tx(pgm_read_byte(data++));
}
 334:	08 95       	ret

00000336 <USART_rx>:
// USART_receive
// 
unsigned char
USART_rx(void)
{
	loop_until_bit_is_set(UCSR0A,RXC0);
 336:	80 91 c0 00 	lds	r24, 0x00C0
 33a:	87 ff       	sbrs	r24, 7
 33c:	fc cf       	rjmp	.-8      	; 0x336 <USART_rx>
	return UDR0;
 33e:	80 91 c6 00 	lds	r24, 0x00C6
}
 342:	08 95       	ret

00000344 <itoa>:
 344:	fb 01       	movw	r30, r22
 346:	9f 01       	movw	r18, r30
 348:	e8 94       	clt
 34a:	42 30       	cpi	r20, 0x02	; 2
 34c:	c4 f0       	brlt	.+48     	; 0x37e <itoa+0x3a>
 34e:	45 32       	cpi	r20, 0x25	; 37
 350:	b4 f4       	brge	.+44     	; 0x37e <itoa+0x3a>
 352:	4a 30       	cpi	r20, 0x0A	; 10
 354:	29 f4       	brne	.+10     	; 0x360 <itoa+0x1c>
 356:	97 fb       	bst	r25, 7
 358:	1e f4       	brtc	.+6      	; 0x360 <itoa+0x1c>
 35a:	90 95       	com	r25
 35c:	81 95       	neg	r24
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	64 2f       	mov	r22, r20
 362:	77 27       	eor	r23, r23
 364:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__udivmodhi4>
 368:	80 5d       	subi	r24, 0xD0	; 208
 36a:	8a 33       	cpi	r24, 0x3A	; 58
 36c:	0c f0       	brlt	.+2      	; 0x370 <itoa+0x2c>
 36e:	89 5d       	subi	r24, 0xD9	; 217
 370:	81 93       	st	Z+, r24
 372:	cb 01       	movw	r24, r22
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	a1 f7       	brne	.-24     	; 0x360 <itoa+0x1c>
 378:	16 f4       	brtc	.+4      	; 0x37e <itoa+0x3a>
 37a:	5d e2       	ldi	r21, 0x2D	; 45
 37c:	51 93       	st	Z+, r21
 37e:	10 82       	st	Z, r1
 380:	c9 01       	movw	r24, r18
 382:	0c 94 c3 01 	jmp	0x386	; 0x386 <strrev>

00000386 <strrev>:
 386:	dc 01       	movw	r26, r24
 388:	fc 01       	movw	r30, r24
 38a:	67 2f       	mov	r22, r23
 38c:	71 91       	ld	r23, Z+
 38e:	77 23       	and	r23, r23
 390:	e1 f7       	brne	.-8      	; 0x38a <strrev+0x4>
 392:	32 97       	sbiw	r30, 0x02	; 2
 394:	04 c0       	rjmp	.+8      	; 0x39e <strrev+0x18>
 396:	7c 91       	ld	r23, X
 398:	6d 93       	st	X+, r22
 39a:	70 83       	st	Z, r23
 39c:	62 91       	ld	r22, -Z
 39e:	ae 17       	cp	r26, r30
 3a0:	bf 07       	cpc	r27, r31
 3a2:	c8 f3       	brcs	.-14     	; 0x396 <strrev+0x10>
 3a4:	08 95       	ret

000003a6 <__udivmodhi4>:
 3a6:	aa 1b       	sub	r26, r26
 3a8:	bb 1b       	sub	r27, r27
 3aa:	51 e1       	ldi	r21, 0x11	; 17
 3ac:	07 c0       	rjmp	.+14     	; 0x3bc <__udivmodhi4_ep>

000003ae <__udivmodhi4_loop>:
 3ae:	aa 1f       	adc	r26, r26
 3b0:	bb 1f       	adc	r27, r27
 3b2:	a6 17       	cp	r26, r22
 3b4:	b7 07       	cpc	r27, r23
 3b6:	10 f0       	brcs	.+4      	; 0x3bc <__udivmodhi4_ep>
 3b8:	a6 1b       	sub	r26, r22
 3ba:	b7 0b       	sbc	r27, r23

000003bc <__udivmodhi4_ep>:
 3bc:	88 1f       	adc	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	5a 95       	dec	r21
 3c2:	a9 f7       	brne	.-22     	; 0x3ae <__udivmodhi4_loop>
 3c4:	80 95       	com	r24
 3c6:	90 95       	com	r25
 3c8:	bc 01       	movw	r22, r24
 3ca:	cd 01       	movw	r24, r26
 3cc:	08 95       	ret

000003ce <_exit>:
 3ce:	f8 94       	cli

000003d0 <__stop_program>:
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <__stop_program>
